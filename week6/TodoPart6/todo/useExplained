useContext Hook: how it works
So Context can be used to pass variables to multiple components. With the useContext hook you can destructor the variables you are passing and tell them to useContext(variable name). so you are telling it to get the info saved to that variable name form the Context API. 
So its like the context is home base and the variable is your team. When a component calls home base and (useContext=) the right code word then that team will be sent to that component. 
useReducer Hook: how it works
So useReducer can be used to change state with actions. its a more concrete way of changing state and it will function exactly how you have set it to function. but it is best used with more complex state. you can put all the functions into the one reducer and it can be used over any component. it cuts out all the handle functions you may have used to deal with all the clicks and submits. it cleans up your props and makes a much cleaner work space.
This is your special ops base each team(function) is stationed here and has its own set of skills(actions) they can be called on by different components and those teams(functions) will then be (dispatched) and their skills(actions) can be used.
That might be confusing you store all your functions or actions with their logic in the reducer function(this function takes two parameters your variable and action.(here the actions are your logic)) in the useReducer hook you put your variable and dispatch. it would look like const[yourVariable,dispatch] = useReducer(reducerFunction, []). Then in your component you can call dispatch({type: yourActionName}) and use the logic in Â that component.

Both useContext and useReducer can he helpful in a larger app. useContext to store the information and then send it to other components where it can be called on and used and changed easily and when it is changed it will update that state and it will update it for everyone.(insted of called each person on the phone to tell them something you can just use the loud speaker and everyone is on the same page at the same time). nad useReducer is a neat way to store all your functions and their logic in one place so it can easily be changed or fixed without breaking the whole page, and they can easily be called on and used in other components.(its a one stop shop). They can also be used together. the useReducer is like a set in stone way of making functions do as they are told and you can useContext to help keep track of the changing state/updates. It helps keep all the moving parts in order and it also help clean up your work space instead of passing a whole array of items(props) then just filtering out the one you want you can call on it by name(what's in a name??).So with that name you can useReducer and dispatch the action(function/logic) and use it on that one thing. 

SO I think using the useContext and useReducer could cut out alot of the confusion I experienced in the todo project. All the CRUD operations can be in the useReducer with a few switch statements and it would clean up the mess that is my code currently. and the useContest can keep track of the changing todos like if one is removed or completed. it can be called and spread out with the newly updated state/array! I'm not 100% sure if I could implement the code but I feel like it would defiantly be easier to look and and understand! because props are still really confusing to me.